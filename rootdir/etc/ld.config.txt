# Copyright (C) 2017 The Android Open Source Project
#
# Bionic loader config file.
#

# Don't change the order here. The first pattern that matches with the
# absolute path of an executable is selected.
dir.system = /system/bin/
dir.system = /system/xbin/

dir.vendor = /odm/bin/
dir.vendor = /vendor/bin/
dir.vendor = /data/nativetest/odm
dir.vendor = /data/nativetest64/odm
dir.vendor = /data/benchmarktest/odm
dir.vendor = /data/benchmarktest64/odm
dir.vendor = /data/nativetest/vendor
dir.vendor = /data/nativetest64/vendor
dir.vendor = /data/benchmarktest/vendor
dir.vendor = /data/benchmarktest64/vendor

dir.system = /data/nativetest
dir.system = /data/nativetest64
dir.system = /data/benchmarktest
dir.system = /data/benchmarktest64

[system]
additional.namespaces = sphal,vndk,rs

###############################################################################
# "default" namespace
#
# Framework-side code runs in this namespace. However, libs from other
# partitions are also allowed temporarily.
###############################################################################
namespace.default.isolated = false

namespace.default.search.paths  = /system/${LIB}
namespace.default.search.paths += /odm/${LIB}
namespace.default.search.paths += /vendor/${LIB}

namespace.default.asan.search.paths  = /data/asan/system/${LIB}
namespace.default.asan.search.paths +=           /system/${LIB}
namespace.default.asan.search.paths += /data/asan/odm/${LIB}
namespace.default.asan.search.paths +=           /odm/${LIB}
namespace.default.asan.search.paths += /data/asan/vendor/${LIB}
namespace.default.asan.search.paths +=           /vendor/${LIB}

###############################################################################
# "sphal" namespace
#
# SP-HAL(Sameprocess-HAL)s are the only vendor libraries that are allowed to be
# loaded inside system processes. libEGL_<chipset>.so, libGLESv2_<chipset>.so,
# android.hardware.graphics.mapper@2.0-impl.so, etc are SP-HALs.
#
# This namespace is exclusivly for SP-HALs. When the framework tries to dynami-
# cally load SP-HALs, android_dlopen_ext() is used to explicitly specifying
# that they should be searched and loaded from this namespace.
#
# Note that there is no link from the default namespace to this namespace.
###############################################################################
namespace.sphal.isolated = true
namespace.sphal.visible = true

namespace.sphal.search.paths  = /odm/${LIB}
namespace.sphal.search.paths += /vendor/${LIB}

namespace.sphal.permitted.paths  = /odm/${LIB}
namespace.sphal.permitted.paths += /vendor/${LIB}

namespace.sphal.asan.search.paths  = /data/asan/odm/${LIB}
namespace.sphal.asan.search.paths +=           /odm/${LIB}
namespace.sphal.asan.search.paths += /data/asan/vendor/${LIB}
namespace.sphal.asan.search.paths +=           /vendor/${LIB}

namespace.sphal.asan.permitted.paths  = /data/asan/odm/${LIB}
namespace.sphal.asan.permitted.paths +=           /odm/${LIB}
namespace.sphal.asan.permitted.paths += /data/asan/vendor/${LIB}
namespace.sphal.asan.permitted.paths +=           /vendor/${LIB}

# Once in this namespace, access to libraries in /system/lib is restricted. Only
# libs listed here can be used.
namespace.sphal.links = default,vndk,rs

# WARNING: only NDK libs can be listed here.
namespace.sphal.link.default.shared_libs  = libc.so
namespace.sphal.link.default.shared_libs += libEGL.so
namespace.sphal.link.default.shared_libs += libGLESv1_CM.so
namespace.sphal.link.default.shared_libs += libGLESv2.so
namespace.sphal.link.default.shared_libs += libdl.so
namespace.sphal.link.default.shared_libs += liblog.so
namespace.sphal.link.default.shared_libs += libm.so
namespace.sphal.link.default.shared_libs += libnativewindow.so
namespace.sphal.link.default.shared_libs += libstdc++.so
namespace.sphal.link.default.shared_libs += libsync.so
namespace.sphal.link.default.shared_libs += libvndksupport.so
namespace.sphal.link.default.shared_libs += libz.so

# WARNING: only VNDK-SP libs can be listed here. DO NOT EDIT this line.
namespace.sphal.link.vndk.shared_libs  = android.hardware.renderscript@1.0.so
namespace.sphal.link.vndk.shared_libs += android.hardware.graphics.common@1.0.so
namespace.sphal.link.vndk.shared_libs += android.hardware.graphics.mapper@2.0.so
namespace.sphal.link.vndk.shared_libs += android.hidl.memory@1.0.so
namespace.sphal.link.vndk.shared_libs += libbase.so
namespace.sphal.link.vndk.shared_libs += libc++.so
namespace.sphal.link.vndk.shared_libs += libcutils.so
namespace.sphal.link.vndk.shared_libs += libhardware.so
namespace.sphal.link.vndk.shared_libs += libhidlbase.so
namespace.sphal.link.vndk.shared_libs += libhidlmemory.so
namespace.sphal.link.vndk.shared_libs += libhidltransport.so
namespace.sphal.link.vndk.shared_libs += libhwbinder.so
namespace.sphal.link.vndk.shared_libs += libion.so
namespace.sphal.link.vndk.shared_libs += libutils.so

# Renderscript gets separate namespace
namespace.sphal.link.rs.shared_libs = libRS_internal.so

###############################################################################
# "rs" namespace
#
# This namespace is exclusively for Renderscript internal libraries.
# This namespace has slightly looser restriction than the vndk namespace because
# of the genuine characteristics of Renderscript; /data is in the permitted path
# to load the compiled *.so file and libmediandk.so can be used here.
###############################################################################
namespace.rs.isolated = true
namespace.rs.visible = true

namespace.rs.search.paths  = /odm/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.search.paths += /vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.search.paths += /system/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.search.paths += /odm/${LIB}
namespace.rs.search.paths += /vendor/${LIB}

namespace.rs.permitted.paths  = /odm/${LIB}
namespace.rs.permitted.paths += /vendor/${LIB}
namespace.rs.permitted.paths += /data

namespace.rs.asan.search.paths  = /data/asan/odm/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.asan.search.paths +=           /odm/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.asan.search.paths += /data/asan/vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.asan.search.paths +=           /vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.asan.search.paths += /data/asan/system/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.asan.search.paths +=           /system/${LIB}/vndk-sp${VNDK_VER}
namespace.rs.asan.search.paths += /data/asan/odm/${LIB}
namespace.rs.asan.search.paths +=           /odm/${LIB}
namespace.rs.asan.search.paths += /data/asan/vendor/${LIB}
namespace.rs.asan.search.paths +=           /vendor/${LIB}

namespace.rs.asan.permitted.paths  = /data/asan/odm/${LIB}
namespace.rs.asan.permitted.paths +=           /odm/${LIB}
namespace.rs.asan.permitted.paths += /data/asan/vendor/${LIB}
namespace.rs.asan.permitted.paths +=           /vendor/${LIB}
namespace.rs.asan.permitted.paths += /data

namespace.rs.links = default,vndk

namespace.rs.link.default.shared_libs  = libc.so
namespace.rs.link.default.shared_libs += libEGL.so
namespace.rs.link.default.shared_libs += libGLESv1_CM.so
namespace.rs.link.default.shared_libs += libGLESv2.so
namespace.rs.link.default.shared_libs += libdl.so
namespace.rs.link.default.shared_libs += liblog.so
namespace.rs.link.default.shared_libs += libm.so
namespace.rs.link.default.shared_libs += libnativewindow.so
namespace.rs.link.default.shared_libs += libstdc++.so
namespace.rs.link.default.shared_libs += libsync.so
namespace.rs.link.default.shared_libs += libvndksupport.so
namespace.rs.link.default.shared_libs += libz.so
# These two libs are private LLNDK libs but are exceptionally visible
# in this 'rs' namespace because RenderScript framework libraries
# which are loaded into this namespace are using them.
namespace.rs.link.default.shared_libs += libft2.so
namespace.rs.link.default.shared_libs += libmediandk.so

namespace.rs.link.vndk.shared_libs  = android.hardware.renderscript@1.0.so
namespace.rs.link.vndk.shared_libs += android.hardware.graphics.common@1.0.so
namespace.rs.link.vndk.shared_libs += android.hardware.graphics.mapper@2.0.so
namespace.rs.link.vndk.shared_libs += android.hidl.memory@1.0.so
namespace.rs.link.vndk.shared_libs += libbase.so
namespace.rs.link.vndk.shared_libs += libc++.so
namespace.rs.link.vndk.shared_libs += libcutils.so
namespace.rs.link.vndk.shared_libs += libhardware.so
namespace.rs.link.vndk.shared_libs += libhidlbase.so
namespace.rs.link.vndk.shared_libs += libhidlmemory.so
namespace.rs.link.vndk.shared_libs += libhidltransport.so
namespace.rs.link.vndk.shared_libs += libhwbinder.so
namespace.rs.link.vndk.shared_libs += libion.so
namespace.rs.link.vndk.shared_libs += libutils.so

###############################################################################
# "vndk" namespace
#
# This namespace is exclusively for vndk-sp libs.
###############################################################################
namespace.vndk.isolated = true
namespace.vndk.visible = true

namespace.vndk.search.paths  = /odm/${LIB}/vndk-sp${VNDK_VER}
namespace.vndk.search.paths += /vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.vndk.search.paths += /system/${LIB}/vndk-sp${VNDK_VER}

namespace.vndk.permitted.paths  = /odm/${LIB}/hw
namespace.vndk.permitted.paths += /odm/${LIB}/egl
namespace.vndk.permitted.paths += /vendor/${LIB}/hw
namespace.vndk.permitted.paths += /vendor/${LIB}/egl

namespace.vndk.asan.search.paths  = /data/asan/odm/${LIB}/vndk-sp${VNDK_VER}
namespace.vndk.asan.search.paths +=           /odm/${LIB}/vndk-sp${VNDK_VER}
namespace.vndk.asan.search.paths += /data/asan/vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.vndk.asan.search.paths +=           /vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.vndk.asan.search.paths += /data/asan/system/${LIB}/vndk-sp${VNDK_VER}
namespace.vndk.asan.search.paths +=           /system/${LIB}/vndk-sp${VNDK_VER}

namespace.vndk.asan.permitted.paths  = /data/asan/odm/${LIB}/hw
namespace.vndk.asan.permitted.paths +=           /odm/${LIB}/hw
namespace.vndk.asan.permitted.paths += /data/asan/odm/${LIB}/egl
namespace.vndk.asan.permitted.paths +=           /odm/${LIB}/egl
namespace.vndk.asan.permitted.paths += /data/asan/vendor/${LIB}/hw
namespace.vndk.asan.permitted.paths +=           /vendor/${LIB}/hw
namespace.vndk.asan.permitted.paths += /data/asan/vendor/${LIB}/egl
namespace.vndk.asan.permitted.paths +=           /vendor/${LIB}/egl

# When these NDK libs are required inside this namespace, then it is redirected
# to the default namespace. This is possible since their ABI is stable across
# Android releases.
namespace.vndk.links = default
namespace.vndk.link.default.shared_libs  = android.hidl.memory@1.0-impl.so
namespace.vndk.link.default.shared_libs += libEGL.so
namespace.vndk.link.default.shared_libs += libc.so
namespace.vndk.link.default.shared_libs += libdl.so
namespace.vndk.link.default.shared_libs += liblog.so
namespace.vndk.link.default.shared_libs += libm.so
namespace.vndk.link.default.shared_libs += libnativewindow.so
namespace.vndk.link.default.shared_libs += libstdc++.so
namespace.vndk.link.default.shared_libs += libsync.so
namespace.vndk.link.default.shared_libs += libvndksupport.so
namespace.vndk.link.default.shared_libs += libz.so

###############################################################################
# Namespace config for vendor processes. In O, no restriction is enforced for
# them. However, in O-MR1, access to /system/${LIB} will not be allowed to
# the default namespace. 'system' namespace will be added to give limited
# (LL-NDK only) access.
###############################################################################
[vendor]
namespace.default.isolated = false

namespace.default.search.paths  = /odm/${LIB}
namespace.default.search.paths += /odm/${LIB}/vndk${VNDK_VER}
namespace.default.search.paths += /odm/${LIB}/vndk-sp${VNDK_VER}
namespace.default.search.paths += /vendor/${LIB}
namespace.default.search.paths += /vendor/${LIB}/vndk${VNDK_VER}
namespace.default.search.paths += /vendor/${LIB}/vndk-sp${VNDK_VER}

# Access to system libraries are allowed
namespace.default.search.paths += /system/${LIB}/vndk${VNDK_VER}
namespace.default.search.paths += /system/${LIB}/vndk-sp${VNDK_VER}
namespace.default.search.paths += /system/${LIB}

# TODO(b/70551668) Remove /vendor/${LIB}/hw from search paths.
# Shared libraries in the directory should be dlopened with full file paths.
# This is a workaround for some legacy prebuilt binaries.
namespace.default.search.paths += /vendor/${LIB}/hw

namespace.default.asan.search.paths += /data/asan/odm/${LIB}
namespace.default.asan.search.paths +=           /odm/${LIB}
namespace.default.asan.search.paths += /data/asan/odm/${LIB}/vndk${VNDK_VER}
namespace.default.asan.search.paths +=           /odm/${LIB}/vndk${VNDK_VER}
namespace.default.asan.search.paths += /data/asan/odm/${LIB}/vndk-sp${VNDK_VER}
namespace.default.asan.search.paths +=           /odm/${LIB}/vndk-sp${VNDK_VER}
namespace.default.asan.search.paths += /data/asan/vendor/${LIB}
namespace.default.asan.search.paths +=           /vendor/${LIB}
namespace.default.asan.search.paths += /data/asan/vendor/${LIB}/vndk${VNDK_VER}
namespace.default.asan.search.paths +=           /vendor/${LIB}/vndk${VNDK_VER}
namespace.default.asan.search.paths += /data/asan/vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.default.asan.search.paths +=           /vendor/${LIB}/vndk-sp${VNDK_VER}
namespace.default.asan.search.paths += /data/asan/system/${LIB}/vndk${VNDK_VER}
namespace.default.asan.search.paths +=           /system/${LIB}/vndk${VNDK_VER}
namespace.default.asan.search.paths += /data/asan/system/${LIB}/vndk-sp${VNDK_VER}
namespace.default.asan.search.paths +=           /system/${LIB}/vndk-sp${VNDK_VER}
namespace.default.asan.search.paths += /data/asan/system/${LIB}
namespace.default.asan.search.paths +=           /system/${LIB}

# TODO(b/70551668) Remove /vendor/${LIB}/hw from search paths.
# Shared libraries in the directory should be dlopened with full file paths.
# This is a workaround for some legacy prebuilt binaries.
namespace.default.asan.search.paths += /data/asan/vendor/${LIB}/hw
namespace.default.asan.search.paths +=           /vendor/${LIB}/hw
